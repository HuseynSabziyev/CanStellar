#pragma checksum "C:\Users\Aykhan\Desktop\CanStellar\YIS\CanStellarBack\CanStellarBack\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dc1bba70ebb323654f1fdffbacea9a09b6a8bf26"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 27 "C:\Users\Aykhan\Desktop\CanStellar\YIS\CanStellarBack\CanStellarBack\Views\Home\Index.cshtml"
using Microsoft.AspNetCore.Mvc.TagHelpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "C:\Users\Aykhan\Desktop\CanStellar\YIS\CanStellarBack\CanStellarBack\Views\Home\Index.cshtml"
using CanStellarBack.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dc1bba70ebb323654f1fdffbacea9a09b6a8bf26", @"/Views/Home/Index.cshtml")]
    #nullable restore
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Telemetry>>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Aykhan\Desktop\CanStellar\YIS\CanStellarBack\CanStellarBack\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            WriteLiteral("\r\n\r\n");
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dc1bba70ebb323654f1fdffbacea9a09b6a8bf263501", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <link rel=""stylesheet"" href=""./assets/index.css"">
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ"" crossorigin=""anonymous"">
    <title>GCS Interface</title>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dc1bba70ebb323654f1fdffbacea9a09b6a8bf264963", async() => {
                WriteLiteral("\r\n    <div id=\"header\" class=\"container-fluid\">\r\n        <img id=\"logo\" src=\"./assets/canstellarlogo.png\"");
                BeginWriteAttribute("alt", " alt=\"", 1492, "\"", 1498, 0);
                EndWriteAttribute();
                WriteLiteral(@">
        <h2>CanStellar Ground Station Interface</h2>
        <a id=""sendButton"" class=""btn btn-warning"">Start telemetry receiving process!</a>
        <a id=""setTime"" class=""btn btn-success"">Set time</a>
         <a id=""simControl"" class=""btn btn-success"">Simulation mode</a>
         <div id=""simControlSelect"" style=""display: none;""></div>
        <div id=""simPressureInput"" style=""display: none;"">
            <input type=""number"" id=""pressureValue"" class=""form-control"" placeholder=""Enter pressure value"">
            <button id=""submitPressure"" class=""btn btn-primary"">Submit</button>
        </div>
        <a id=""calAltitude"" class=""btn btn-primary"">Calibrate altitude</a>
        <a id=""controlAudio"" class=""btn btn-success"">Control audio</a>
        <div id=""controlAudioSelect"" style=""display: none;""></div>
        <a id=""stopButton"" class=""btn btn-danger"">STOP!</a>
    </div>
    <div id=""main"" class=""container-fluid"">
        <div style=""display: flex !important;flex-direction: row !importa");
                WriteLiteral(@"nt;flex-wrap: wrap !important;gap: 200px !important;justify-content: center !important;"" id=""telemetryChartContainer"">
            <canvas id=""altitudeChart""></canvas>
            <canvas id=""airspeedChart""></canvas>
            <canvas id=""temperatureChart""></canvas>
            <canvas id=""pressureChart""></canvas>
        </div>
        <div id=""databox"" class=""container-sm display-flex flex-direction-column"">
        </div>
    </div>

    <script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>
    <script");
                BeginWriteAttribute("src", " src=\"", 3060, "\"", 3148, 2);
                WriteAttributeValue("", 3066, "https://cdn.jsdelivr.net/npm/", 3066, 29, true);
                WriteLiteral("@");
                WriteAttributeValue("", 3097, "microsoft/signalr@7.0.5/dist/browser/signalr.min.js", 3097, 51, true);
                EndWriteAttribute();
                WriteLiteral(@"></script>
    <script src=""https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js""></script>
    <script>
        $(document).ready(function () {
            // Event handler for the 'sendButton'
            $(""#sendButton"").click(function () {
                $.ajax({
                    url: ""/Home/TelemetryFunc"",
                    type: ""POST"",
                    success: function () {
                        console.log(""Program started successfully."");
                    },
                    error: function (xhr, status, error) {
                        console.error(""Error starting the program:"", error);
                    },
                });
            });

            // Event handler for the 'setTime' button
            $(""#setTime"").click(function () {
                $.ajax({
                    url: ""/Home/SetTime"",
                    type: ""POST"",
                    success: function () {
                        console.log(""Time set successfully."");
");
                WriteLiteral(@"                    },
                    error: function (xhr, status, error) {
                        console.error(""Error setting time:"", error);
                    },
                });
            });

            // Event handler for the 'calAltitude' button
            $(""#calAltitude"").click(function () {
                $.ajax({
                    url: ""/Home/CalibrateAltitude"",
                    type: ""POST"",
                    success: function () {
                        console.log(""Altitude calibrated successfully."");
                    },
                    error: function (xhr, status, error) {
                        console.error(""Error calibrating altitude:"", error);
                    },
                });
            });

            // Event handler for the 'simControl' button
            $(""#simControl"").click(function () {
                if ($(""#simControlSelect"").is(':empty')) {
                    const selectBox = `
                            ");
                WriteLiteral(@"    <select id=""simControlOptions"" class=""form-select"">
                                    <option value=""2"">Enable</option>
                                    <option value=""1"">Activate</option>
                                    <option value=""0"" selected>Disable</option>
                                </select>
                            `;
                    $(""#simControlSelect"").html(selectBox);

                    // Add change event listener to the select box
                    $(""#simControlOptions"").on('change', function () {
                        const selectedValue = $(this).val();
                        $.ajax({
                            url: ""/Home/SimulationControl"",
                            type: ""POST"",
                            data: { key: selectedValue },
                            success: function () {
                                console.log(""Simulation mode set to "" + selectedValue);
                                if (selectedValue == ""1"" || sele");
                WriteLiteral(@"ctedValue == ""2"") {
                                    $(""#simPressureInput"").show();
                                } else if (selectedValue == ""0"") {
                                    $(""#simPressureInput"").hide();
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error(""Error setting simulation mode:"", error);
                            },
                        });
                        // Hide the select box after selection
                        $(""#simControlSelect"").hide();
                    });
                }
                $(""#simControlSelect"").toggle();
            });

            $(""#submitPressure"").click(function () {
                const pressureValue = $(""#pressureValue"").val();
                $.ajax({
                    url: ""/Home/SimulatePressure"",
                    type: ""POST"",
                    data: { Pressure: pressureVa");
                WriteLiteral(@"lue },
                    success: function () {
                        console.log(""Simulated pressure set to "" + pressureValue);
                    },
                    error: function (xhr, status, error) {
                        console.error(""Error setting simulated pressure:"", error);
                    },
                });
            });

            $(""#controlAudio"").click(function () {
                if ($(""#controlAudioSelect"").is(':empty')) {
                    const selectBox = `
                        <select id=""controlAudioOptions"" class=""form-select"">
                            <option value=""1"">On</option>
                            <option value=""0"" selected>Off</option>
                        </select>
                    `;
                    $(""#controlAudioSelect"").html(selectBox);

                    // Add change event listener to the select box
                    $(""#controlAudioOptions"").on('change', function () {
                        cons");
                WriteLiteral(@"t selectedValue = $(this).val();
                        $.ajax({
                            url: ""/Home/ControlAudio"",
                            type: ""POST"",
                            data: { key: selectedValue },
                            success: function () {
                                console.log(""Audio control set to "" + selectedValue);
                            },
                            error: function (xhr, status, error) {
                                console.error(""Error setting audio control:"", error);
                            },
                        });

                        // Hide the select box after selection
                        $(""#controlAudioSelect"").hide();
                    });
                }
                $(""#controlAudioSelect"").toggle();
            });

        });
    </script>

    <script>
        $(document).ready(function () {
            $(""#stopButton"").click(function () {
                $.ajax({
           ");
                WriteLiteral(@"         url: ""/Home/StopProgram"",
                    type: ""POST"",
                    success: function (response) {
                        console.log(""Program stopped successfully."");
                      
                    },
                    error: function (xhr, status, error) {
                        console.error(""Error stopping the program:"", error);
                        
                    }
                });
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            var connection = new signalR.HubConnectionBuilder()
                .withUrl(""/telemetryHub"")
                .build();
            connection.start()
                .then(function () {
                    console.log(""SignalR connection established."");
                    console.log(""SignalR connection ID: "" + connection.connectionId);
                })
                .catch(function (err) {
                    console.error(err.toString());
 ");
                WriteLiteral(@"               });
            var counter = 1;
            connection.on(""ReceiveTelemetryData"", function (telemetry) {
                console.log(""Received telemetry data:"", telemetry);
                var telemetryDataContainer = $(""#databox"");
                
                var telemetryData =
                    '<div id=""tele-data"">' +
                    '<p id=""raw-telemetric-data"">' + counter+'. Raw Telemetry ' + telemetry.raw + '</p>' +
                    '<h6>Detailed telemetry:</h6>' +
                    '<ol id=""telemetric-data-list"">' +
                    '<li><p>Team ID: ' + telemetry.teamId + '</p></li>' +
                    '<li><p>Mission Time: ' + telemetry.missionTime + ' </p></li>' +
                    '<li><p>Packet Count: ' + telemetry.packetCount + ' </p></li>' +
                    '<li><p>State: ' + telemetry.state + '</p></li>' +
                    '<li><p>Altitude: ' + telemetry.altitude + ' m</p></li>' +
                    '<li><p>Air Speed: ' + telemetry");
                WriteLiteral(@".airSpeed + ' m/s</p></li>' +
                    '<li><p>HS_DEPLOYED: ' + telemetry.hS_DEPLOYED + '</p></li>' +
                    '<li><p>PC_DEPLOYED: ' + telemetry.pC_DEPLOYED + '</p></li>' +
                    '<li><p>Temperature: ' + telemetry.temperature + '</p></li>' +
                    '<li><p>Pressure: ' + telemetry.pressure + ' </p></li>' +
                    '<li><p>Voltage: ' + telemetry.voltage + ' V</p></li>' +
                    '<li><p>GPS Time: ' + telemetry.gpS_Time + ' </p></li>' +
                    '<li><p>GPS Altitude: ' + telemetry.gpS_Altitude + ' m</p></li>' +
                    '<li><p>GPS_Latitude: ' + telemetry.gpS_Latitude + ' </p></li>' +
                    '<li><p>GPS_Longitude: ' + telemetry.gpS_Longitude + ' </p></li>' +
                    '<li><p>GPS_Sats: ' + telemetry.gpS_Sats + ' </p></li>' +
                    '<li><p>Tilt X: ' + telemetry.tilt_X + ' </p></li>' +
                    '<li><p>Tilt Y: ' + telemetry.tilt_Y + ' </p></li>' +
            ");
                WriteLiteral(@"        '<li><p>Rotation Z: ' + telemetry.rot_Z + ' </p></li>' +
                    '<li><p>CMD Echo: ' + telemetry.cmD_ECHO + ' </p></li>' +
                    '<li><p>Note: ' + telemetry.note + ' </p></li>' +
                    '</ol>' +
                    '</div>';
                telemetryDataContainer.prepend(telemetryData);
                counter++;
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            var chartWidth = 400;
            var chartHeight = 300;
            var altitudeChartCtx = document.getElementById('altitudeChart').getContext('2d');
            var airspeedChartCtx = document.getElementById('airspeedChart').getContext('2d');
            var temperatureChartCtx = document.getElementById('temperatureChart').getContext('2d');
            var pressureChartCtx = document.getElementById('pressureChart').getContext('2d');

            altitudeChartCtx.canvas.width = chartWidth;
            altitudeChartCtx.canvas.he");
                WriteLiteral(@"ight = chartHeight;
            airspeedChartCtx.canvas.width = chartWidth;
            airspeedChartCtx.canvas.height = chartHeight;
            temperatureChartCtx.canvas.width = chartWidth;
            temperatureChartCtx.canvas.height = chartHeight;
            pressureChartCtx.canvas.width = chartWidth;
            pressureChartCtx.canvas.height = chartHeight;

            var altitudeChart = new Chart(altitudeChartCtx, getChartConfig(""Altitude"", 0, 1000));
            var airspeedChart = new Chart(airspeedChartCtx, getChartConfig(""Airspeed"", 0, 1000));
            var temperatureChart = new Chart(temperatureChartCtx, getChartConfig(""Temperature"", 0, 100));
            var pressureChart = new Chart(pressureChartCtx, getChartConfig(""Pressure"", 50, 150));

            function getChartConfig(label, yAxisMin, yAxisMax) {
                return {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
          ");
                WriteLiteral(@"                  label: label,
                            data: [],
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }]
                    },
                    options: {
                        responsive: false,
                        scales: {
                            y: {
                                min: yAxisMin,
                                max: yAxisMax,
                                ticks: {
                                    // Allow chart to display intermediate values
                                    stepSize: undefined, // Let Chart.js handle step sizes
                                    callback: function (value) {
                                        return value;
                                    }
                                }
                            }
                        }
                    }
                };
            }

            var counter ");
                WriteLiteral(@"= 1;
            var maxDataPoints = 10;

            var updateChart = function (telemetry) {
                var time = counter++;

                // Altitude
                if (altitudeChart.data.labels.length >= maxDataPoints) {
                    altitudeChart.data.labels.shift();
                    altitudeChart.data.datasets[0].data.shift();
                }
                altitudeChart.data.labels.push(time);
                altitudeChart.data.datasets[0].data.push(telemetry.altitude);

                // Airspeed
                if (airspeedChart.data.labels.length >= maxDataPoints) {
                    airspeedChart.data.labels.shift();
                    airspeedChart.data.datasets[0].data.shift();
                }
                airspeedChart.data.labels.push(time);
                airspeedChart.data.datasets[0].data.push(telemetry.airSpeed);

                // Temperature
                if (temperatureChart.data.labels.length >= maxDataPoints) {
               ");
                WriteLiteral(@"     temperatureChart.data.labels.shift();
                    temperatureChart.data.datasets[0].data.shift();
                }
                temperatureChart.data.labels.push(time);
                temperatureChart.data.datasets[0].data.push(telemetry.temperature);

                // Pressure
                if (pressureChart.data.labels.length >= maxDataPoints) {
                    pressureChart.data.labels.shift();
                    pressureChart.data.datasets[0].data.shift();
                }
                pressureChart.data.labels.push(time);
                pressureChart.data.datasets[0].data.push(telemetry.pressure);

                // Update all charts
                altitudeChart.update();
                airspeedChart.update();
                temperatureChart.update();
                pressureChart.update();
            };

            var connection = new signalR.HubConnectionBuilder()
                .withUrl(""/telemetryHub"")
                .build();
         ");
                WriteLiteral(@"   connection.start()
                .then(function () {
                    console.log(""SignalR connection established."");
                    console.log(""SignalR connection ID: "" + connection.connectionId);
                })
                .catch(function (err) {
                    console.error(err.toString());
                });

            connection.on(""ReceiveTelemetryData"", function (telemetry) {
                console.log(""Received telemetry data:"", telemetry);
                updateChart(telemetry);
            });
        });

    </script>
   
   
    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"" crossorigin=""anonymous""></script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Telemetry>> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
